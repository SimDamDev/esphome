text_sensor:
  platform: template
  id: bright_text
  name: "bright_Ha_in_hex"
  lambda: |-
      std::string text = "";
      text = to_string(int(id(cuisine_planfond_bright).state));
      return {text};
  update_interval: 5s

switch:
  - platform: template
    name: "switch cuisine"
    id: switch_cuisine
    lambda: |-
      if (id(cuisine_light).state) {
        return true;
      } else{
        return false;
      }
    turn_on_action:
      - lambda: |-
          id(cuisinenx).send_command_printf("bt0.val=1");
          id(text_bright)->execute();
    turn_off_action:
      - lambda: |-
          id(cuisinenx).send_command_printf("bt0.val=0");
          id(text_bright)->execute();

  - platform: template
    name: "switch bar"
    id: switch_bar
    lambda: |-
      if (id(bar_light).state) {
        return true;
      } else{
        return false;
      }
    turn_on_action:
      - lambda: |-
          if(id(bar_on_off).state){
          id(cuisinenx).send_command_printf("bt1.val=1");
          }
          if(id(bar_minuterie).state){
          //id(timer)->execute();
          }
    turn_off_action:
      - lambda: |-
          if(id(bar_on_off).state){
          id(cuisinenx).send_command_printf("bt1.val=0");
          }

light: 
  - platform: binary
    name: bar
    output: bar_output

output:
  - id: bar_output
    platform: gpio
    pin: GPIO05


script:
  - id: minus_13
    parameters:
      bright: std::string
    then:
      lambda: |-
        int temp = 0;
        temp = (stoi(bright))-13;
        id(bright_text).publish_state(to_string(temp));

  - id: plus_13
    parameters:
      bright: std::string
    then:
      lambda: |-
        int temp = 0;
        temp = (stoi(bright))+13;
        id(bright_text).publish_state(to_string(temp));
  
  - id: text_bright
    then:
      if:
        condition:
          lambda: |-
            return id(cuisine_light).state;
        then:
          lambda: |-
            id(cuisinenx).set_component_text_printf("page0.bright","%i %%", int(id(cuisine_planfond_bright).state)*100/255);
        else:
          lambda: |-
            id(cuisinenx).set_component_text_printf("page0.bright", "0%%");
  

















